MERN Stack Workshop (AIT Bengaluru)
Duration: 6 days (36 hours)

Day1: Monday 26-05-2025

Session1:
Theory on Databases and Technologies, Web Apps etc.
1. notepad++		For making quick notes
Link:	https://notepad-plus-plus.org/downloads/v8.7.7/

2. node
Link:	https://nodejs.org/en/download

3. VS Code
Link: 	https://code.visualstudio.com/download

4. git
Link:	https://git-scm.com/downloads

5. postman
Link:	https://www.postman.com/downloads/

6. mongodb
	a. server
	Link:	https://www.mongodb.com/try/download/community
	b. compass (.exe)
	Link:	https://www.mongodb.com/try/download/shell
	c. shell (download .msi file)
	Link:	https://www.mongodb.com/try/download/shell
Session2:
App Installations and Git Repo creation, PAT creation, git commands

Once all installer files (setup files, .msi files) are downloaded, cut and paste them into their respective folders inside the software folder.

Now install all the Apps one by one (double click and install)

Open the command prompt in home directory and Check if the apps are availabvle to use/run.

$ code --version
$ git --version

If the app/command is not recognisable even after installing, then go to the path where it is installed (For example, mongod command, is available in C:\Program Files\MongoDB\Server\7.0\bin) Copy thios path and add it to the Environment variables "path" and now close and open the command prompt and you can see the "mongod" command is available for use(recognised).

Git:
1. Create(login into) git account (use your personal and permanent email id)

2. Create new Repo
	Click on + button on top (Click New Repository)
	Repo name -> Description -> Public -> Add Readme File -> Create
Repo URL:	https://github.com/neelmyna/ait_mern


3. Configure your git account with your system/laptop
	$ git config --global user.name "USERNAME"
	$ git config --global user.email "EMAIL"

4. Create Personal Access Token (PAT)
	On top right corner, click on profile icon
	Scroll down and click settings
	Next window, scroll down and click developer settings (bottom left)
	Next window, left top, Click Personal access tokens
	Click Tokens classic
	Next window, Click generate new token, Click generate new token classic
	Add a note (this PAT is created for my learning purpose during my engineering)
	Click Expiration, select NO EXPIRIRATION
	Select the 1st (top most) check box Repo
	Scroll down fully and click Generate token (green button)
	Now copy the PAT
	Come to gmail(your personal mailing app)
	Mail the PAT to yourself (Add the mail subject as "git pat")
	NOTE: Do not store the PAT anywhere else. It is confidential. And you need it for next few years. Hence mail it to yourself 
	
GIT COMMANDS:

$ git status
This is to know the status of my local repo w.r.t. to the remote repo

$ git clone git_repo_url
$ git clone https://github.com/neelmyna/ait_mern

$ git pull origin main
This command downloads the content of the remote repo that is not available in local repo (from the main branch only).

CLONE USING PAT:
$ git clone https://PAT@git_URL
-------------------------------
DAY2 27-05-2025 Tuesday

Java	MySQL
byte	tinyint
short	smallint
int		int
long	bigint
----------------------------
map, filter, reduce

The map method is used to access all elements of a list/array and do something with it.
For example, I want to add bonus of Rs.1000/- to salary of every employee whose details are available in the list.

The filter method is used to get the filtered objects from the list on some filtering cretiria.
For example, I want the list of employees who are not from Bengaluru.
OR, I want the list of employees who are working as developers.

The reduce method is used to deduce/calculate some value using the elements/objects of the list.
For example, to calsulate the sum of all salaries of the employees.
Or to find the employee with highest salary.
--------------------------------
A template row for a table is below:
newRow = `<tr> <td> ${name} </td> <td> ${price} </td> <td> ${quantity} </td> <td> ${amount} </td> </tr>`

var rows = '' // To store all the rows

rows = rows + newRow

<table>
	<tr>
		<th> Name </th>
		<th> Price </th>
		<th> Quantity </th>
		<th> Total Amount </th>
		${rows}
	</tr>
</table>


name = document.getElementById("productName").value
price = pasrseFloat(document.getElementById("price").value)
quantity = parseInt(document.getElementById("quantity").value)
totalAmount = pasrseFloat(document.getElementById("totalAmount").value)

product = {
	name : name,
	price : price,
	quantity : quantity,
	totalAmount : totalAmount,
}
-----------------------------------------------
STEPS TO CRAETE BACKEND APP:

create a new folder named "person"
from the command prompt go inside the folder
run command:
$ npm init

Now open the folder person in vs code
Create a new file index.js  (This file should a sibling of package.json)

$ npm i express
-------------------------------------------
https://docs.google.com/forms/d/1z8zG0Fezu7TFOqPtqFvMcbUys423fURPJWdSMszStZM/edit

p1.js

const firstNumber = 20
const secondNumber = 40

function bigOfTwo(num1, num2) {
    if(num1 > num2)
        return num1
    else
        return num2
}

const smallOfTwo = (num1, num2) => {
    if(num1 < num2)
        return num1
    else
        return num2
}

module.exports = {firstNumber, secondNumber, bigOfTwo, smallOfTwo}

//export {firstNumber, secondNumber, bigOfTwo, smallOfTwo}
----------------------------
index.js

// import { firstNum, secondNum, bigOfTwo, smallOfTwo } from "./p1";

const  { firstNumber, secondNumber, bigOfTwo, smallOfTwo }  = require('./p1.js')

console.log(`First Number = ${firstNumber}`)
console.log(`Second Number = ${secondNumber}`)

const num1 = 25
const num2 = 33

console.log(`Biggest between ${num1} and ${num2} is ${bigOfTwo(num1, num2)}`)
console.log(`Smallest between ${num1} and ${num2} is ${smallOfTwo(num1, num2)}`)
---------------------------------------
https://tinyurl.com/ait-mern-test1

----------------------------------------
program3
index.js:
const express = require('express');
const app = express();
const port = 3000;

app.listen(3000, () => {
    console.log('Server is running on port 3000')
  });

//  app.listen(port, () => {
//    console.log(`Server is running on http://localhost:${port}`);
//  });
------------------------------------------
example 2
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
------------------------------------------
example 3

const express = require('express');
const app = express();
const port = 3000;


app.listen(port, () => {
	console.log(`Server is running on http://localhost:${port}`);
});

app.get('/', (req, res) => {
  res.send('The Response just came from the Backend Express!');
});
--------------------------------------------------
example 4

const express = require('express');
const mongoose = require('mongoose');
const app = express();
const port = 3000;

const mongoURI = 'mongodb://127.0.0.1:27017/nithin_db';

// Connect to MongoDB
mongoose.connect(mongoURI)
.then(() => {
  console.log('Connected to MongoDB');
})
.catch((err) => {
  console.error('Error connecting to MongoDB', err);
});

// Disconnect from MongoDB
const disconnectFromMongoDB = async () => {
  try {
    await mongoose.disconnect();
    console.log('Disconnected from MongoDB');
  } catch (err) {
    console.error('Error disconnecting from MongoDB', err);
  }
};

disconnectFromMongoDB();

app.listen(port, () => {
    console.log('Server is running on port 3000')
  });

//  console.log(`Server is running on http://localhost:${port}`);
-----------------------------------------------
Flight Model

airline			airindia
source			bengaluru
destination		kolkate
duration		2.5
fare			5800
capacity		180

Steps:
Create a folder "flight"
From inside the folder open the command prompt
$ npm list 		Check if the modules are available
$ npm init -y	Create an empty backend project
Note: Make sure in the package.json you have the dependencies json with the modules.
If not avialable then run the command:
$ npm install express mongoose cors

Create the files like this:
	flightController.js
	server.js   	OR      index.js
	models (folder)
		flightModel.js
